package foldfor;

import java.util.*;

dsl FoldFor <A, B, aName: Identifier, bName: Identifier> {
  priority p0, p1 {
    p0 > PredefOperators.add > p1
  }

  static <E, R, acc: Identifier, elem: Identifier> R[p1]
    "for" "(" acc "=" _ ";" elem ":" _ ")" acc "=" _
    (R ini, List<E> es, FoldFor<E, R, elem, acc> |- R body)
  {
    R a = ini;
    for (E e : es) {
      a = body.apply(new FoldFor<E, R, elem, acc>(e, a));
    }
    return a;
  }

  static <E, R, acc: Identifier, elem: Identifier> R[p1]
    "fold-for" "(" acc "=" _ ";" elem ":" _ ")" _
    (R ini, List<E> es, FoldFor<E, R, elem, acc> |- R body)
  {
    R a = ini;
    for (E e : es) {
      a = body.apply(new FoldFor<E, R, elem, acc>(e, a));
    }
    return a;
  }

  static Identifier[p0] _%"\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*" (String name) {
    return new Identifier(name);
  }

  public FoldFor (A a, B b) {
    this.a = a;
    this.b = b;
  }

  A[p0] aName[p0] () { return a; }
  B[p0] bName[p0] () { return b; }

  private A a;
  private B b;
}

class Identifier {
  public Identifier (String name) { this.name = name; }
  public String getName() { return name; }
  private String name;
}
